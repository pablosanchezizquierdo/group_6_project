---
title: "05_analysis_1"
format:
  html:
    embed-resources: true
editor: visual
---

# Sequence analysis

In this section we perform a sequence analysis, divided in four subsections: Multiple Sequence Alignment (MSA), Phylogeny, Core sequence and Sequence Logo

### Load libraries

```{r}
#| message: false
library("tidyverse")
library("Biostrings")
library("msa")
library("ggseqlogo")
library("ape")
library("seqinr")
library("ggseqlogo")
source("99_proj_func.R")
```

### Load augmented dataset

```{r}
tsv_file <- "../data/data_augmented.tsv"
data_augmented <- read_tsv(tsv_file)
```

## 1. Multiple Sequence Alignment (MSA)

### Group sequences by compound

Create a new dataset where the sequences from individual samples are joined in the same group if the organism degrade the same compound. Filter samples without sequence. From now, all analysis are performed on groups based on compound degradation.

```{r}
compound_lists <- data_augmented |>
  filter(!is.na(Sequence)) |> 
  group_by(Compound_Name) |> 
  summarise(ProteinSequences = list(Sequence))
```

### Apply MSA on each compound

Perform a MSA on each comppound group. Only sequences shorter than 200 aa are taken

```{r}
# Perform MSA on each list of sequences
aligned_compounds <- compound_lists |>
  filter(map_lgl(ProteinSequences, ~length(.x) < 200)) |> 
  mutate(MSA = map(ProteinSequences, ~msa(.x, type = "protein")))
```

## 2. Phylogeny

### Consensus sequence

Extract consensus sequence from MSA. Then, calculate the percentage of gaps and missing positions.

```{r}

aligned_compounds <- aligned_compounds |>
  mutate(consensus_sequence = map(MSA, ~consensusString(consensusMatrix(.x)))) |>
  mutate(percentage = unlist(map(consensus_sequence, ~calculate_percentage(.x))))
  
```

### Consensus sequence plot

Plot the percentages for each consensus sequence

```{r}
percentage_plot <- ggplot(aligned_compounds, aes(x = Compound_Name, y = percentage)) + 
    geom_bar(stat = "identity", fill = "steelblue") +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1), axis.text.y = element_text(size = 8))
    labs(title = "Percentage of missing positions for each compound alignment", x = "Compounds", y = "Percentage")
    
ggsave("../results/percentage_consensus_seq.png", percentage_plot)

percentage_plot
```

We can see that most of consensus sequences are unknown because sequences differ too much between them. To check this, we perform a phylogeny analysis.

### Aligned sequences

We extract aligned sequences from MSA alignment to perform posterior analysis

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(aligned_sequences = map(MSA, ~msaConvert(.x, type="bios2mds::align"))) |>
  mutate(aligned_sequences = map(aligned_sequences, ~map(.x, ~paste(.x, collapse = ""))))
```

### Distance matrix

To create phylogeny trees, a distance matrix needs to be construct before using the aligned sequences extracted before.

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(distance_matrix = map(MSA, ~msaConvert(.x, type="seqinr::alignment"))) |>
  mutate(distance_matrix = map(distance_matrix, ~dist.alignment(.x, "identity")))
```

### Phylogenetic trees

Create a phylogenetic tree for all the compounds is computationally cost. Therefore, only one phylogenetic tree is created, the one belonging to Hexabromobiphenyl compound. We can see some by eye different clusters. Label numbers correspond to individual aligned sequences.

```{r}
Hexabromobiphenyl_tree <- njs(aligned_compounds$distance_matrix[5][[1]])

# Plot the tree
plot(Hexabromobiphenyl_tree, main="Phylogenetic Tree of Hexabromobiphenyl", cex=0.5)
```

## 3. Core sequence

As shown in part 2, most of the consensus sequence is missing because of the sequence difference, also shown in the phylogenetic trees. However, there are small parts of the alignment that can show information. Therefore, the core sequence of the alignment is extracted to do some analysis.

### Consensus matrix

In order to get the consensus sequence, first we need to score each position of the alignment. This involves two steps. Firstly, a consensus matrix is calculated, where you can see the aa count for each position. We take only the first 26 elements because the last 4 correspond to mismatching, gaps and partial matching.  

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(conMat = map(MSA, ~consensusMatrix(.x))) |>
  mutate(conMat = map(conMat, ~(.x[1:26,])))
```

### 9-mer scoring

Now we have the aa count for each position, we can calculate the best 9mer. This involves two steps. Firstly, we take the maximum count of one aminoacid for each position to get the score position. Then, we calculate the score of each 9mer summing the score for the 9 positions. Finally, we take the 9mer with the maximum score and we store its first position in the alignment in the column mer_position.

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(mer_position = map(conMat, ~mer_position_function(.x)))
```

### Core extraction

We extract the core from aligned sequences using the mer_position and the following 8 positions.

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(core = map2(aligned_sequences, mer_position, ~map2(.x, rep(.y, length(.x)), ~str_sub(., .y, .y + 8)))) |>
  mutate(core = map(core, ~unlist(.x)))
```

## 4. Sequence logo

Calculate the sequence logo using the core sequences

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(seqlogo = map(core, ~ggseqlogo(.x, seq_type = "aa")))
```

Print all sequence logos (one for each compound)

```{r}
aligned_compounds$seqlogo
```

Save the sequence logo corresponding to the compound Hexabromobiphenyl.

```{r}
Hexabromobiphenyl_seqlogo <- aligned_compounds$seqlogo[5][[1]]

ggsave("../results/seqlogo.png", Hexabromobiphenyl_seqlogo)
```
