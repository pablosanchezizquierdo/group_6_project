---
title: "Sequence analysis"
format:
  html:
    embed-resources: true
editor: visual
---

# Sequence analysis

## Load libraries:
```{r}
library("msa")
library("ape")
library("seqinr")
```

## Load augmented dataset from step 4

```{r}
tsv_file <- "../data/data_augmented.tsv"
data_augmented <- read_tsv(tsv_file)
```

## Group sequences by compound

Create a new dataset where the sequences from individual samples are joined in the same group if the organism degrade the same compound. Filter samples without sequence.

```{r}

compound_lists <- data_augmented |>
  filter(!is.na(Sequence)) |> 
  group_by(Compound_Name) |> 
  summarise(ProteinSequences = list(Sequence))

```

## Apply MSA on each compound

```{r}
# Perform MSA on each list of sequences
aligned_compounds <- compound_lists |>
  filter(map_lgl(ProteinSequences, ~length(.x) < 200)) |> 
  mutate(MSA = map(ProteinSequences, ~msa(.x, type = "protein")))

```

## Consensus sequence

Extract consensus sequence from MSA and check the percentage of gaps and missing positions.

```{r}
calculate_percentage <- function(consensus_sequence) {
    
    count <- str_count(consensus_sequence, fixed("-")) + str_count(consensus_sequence, fixed("?"))
    total <- nchar(consensus_sequence)
    percentage <- (count / total) * 100

    return(percentage)
}

aligned_compounds <- aligned_compounds |>
  mutate(consensus_sequence = map(MSA, ~consensusString(consensusMatrix(.x)))) |>
  mutate(percentage = unlist(map(consensus_sequence, ~calculate_percentage(.x))))
  
```

Plot the percentages for each compound

```{r}
aligned_compounds |>
  ggplot(aes(x = Compound_Name, y = percentage)) + 
    geom_bar(stat = "identity", fill = "steelblue") +
    theme_minimal() +
    theme(axis.text.x = element_text(size = 8, angle = 45, hjust = 1, vjust = 1), axis.text.y = element_text(size = 8))
    labs(title = "Percentage of missing positions for each compound alignment", x = "Compounds", y = "Percentage")
```

## Aligned sequences

We extract aligned sequences from MSA alignment to perform posterior analysis

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(aligned_sequences = map(MSA, ~msaConvert(.x, type="bios2mds::align"))) |>
  mutate(aligned_sequences = map(aligned_sequences, ~map(.x, ~paste(.x, collapse = ""))))
```

## Distance matrix

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(distance_matrix = map(MSA, ~msaConvert(.x, type="seqinr::alignment"))) |>
  mutate(distance_matrix = map(distance_matrix, ~dist.alignment(.x, "identity")))
```

## Phylogenetic trees

```{r}

phylo_tree <- njs(aligned_compounds$distance_matrix[6][[1]])

# Plot the tree
plot(phylo_tree, main="Phylogenetic Tree of a compound example", cex=0.5)

```

## Clustering

### Calculate clusters

```{r}
clusters_vector <- list(
  c("5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","4","4","4","4","4","4","4","4","3","3","3","3","3","3","4","4","4","4","2","2","2","2","2","2","4","4","4","4","4","4","1","1","1","1","1","1","1","1","1","1","2","2","2","2","2","2","2","2","2","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5","5"),
  c("6","6","6","6","6","6","6","6","6","6","6","7","7","7","7","7","7","7","7","7","7","7","7","7","8","8","8","8","8","8"),
  c("9","10"),
  c("11","11","11","11","11","11","11","11","11","11","11","12","12","12","12","12","12","12","12","12","12","12","12","12","13","13","13","13","13","13"),
  c("14","14","14","14","14","14","14","15","15","15","15","16","16","16","16","16","16","16","17","17","17","17","17","17","18","18","18","18"),
  c("19","19","19","19","19","19","19","19","19","19","19","19","19","19","19","20","20","20","20","20","20","20","20","20","20","20","20","20","20","20","21","21","21","21","21","21","21","21","21","21","21","21","21","21","21","22","22","22","22","22","22","22","22","22","22","22","22","22","22","22","22"),
  c("23","23","23","23","23","23","23","23","23","23","23","24","24","24","24","24","24","24","24","24","24","24","24","24","25","25","25","25","25","25"),
  c("26","26","27","28"),
  c("72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","71","71","71","71","71","71","71","71","70","70","70","70","70","70","71","71","71","71","69","69","69","69","69","69","71","71","71","71","71","71","68","68","68","68","68","68","68","68","68","68","69","69","69","69","69","69","69","69","69","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72","72"),
  c("35","35","35","35","35","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","36","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","34","37","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35","35"),
  c("41","41","41","41","41","41","41","41","38","38","38","38","38","39","39","39","39","39","40","40","40","40","40","40"),
  c("42","42","42","43","43","44","44","44","44","44","43","45","45","45","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46","46"),
  c("73","73","73","74","74","75","75","75","75","75","74","76","76","76","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77","77"),
  c("47","47","47","48","48","48","49","49","50","49","51","51","52","52","52","49","52","51"),
  c("53","53","54","54","54","54","54","54","54","54","54","54","54","54","54","54","54","54","54","53","53","53","53","53","53","53","53","53","53","53","53","53","53","53","53","53","55","55","56","56","56","56","56","56","56","53","53","55","53","55","57","53","55","58","54","55","53"),
  c
  c("62","62","63"),
  c("65","65","65","65","65","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","66","64","64","64","64","64","64","64","64","64","64","64","64","64","64","64","64","64","64","64","64","67","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65","65"))

aligned_compounds$clusters <- clusters_vector

vector_1 <- as.character(1:72)
vector_2 <- c("Beta-1,2,3,4,5,6-Hexachlorocyclohexane_1","Beta-1,2,3,4,5,6-Hexachlorocyclohexane_2","Beta-1,2,3,4,5,6-Hexachlorocyclohexane_3","Beta-1,2,3,4,5,6-Hexachlorocyclohexane_4","Beta-1,2,3,4,5,6-Hexachlorocyclohexane_5","Decabromodiphenyl ether_1","Decabromodiphenyl_ether_2","Decabromodiphenyl_ether_3","Endosulfan_1","Endosulfan_2","Heptabromodiphenyl_ether_1","Heptabromodiphenyl_ether_2","Heptabromodiphenyl_ether_3","Hexabromobiphenyl_1","Hexabromobiphenyl_2","Hexabromobiphenyl_3","Hexabromobiphenyl_4","Hexabromobiphenyl_5","	
Hexabromocyclododecane_1","	
Hexabromocyclododecane_2","	
Hexabromocyclododecane_3","Hexabromocyclododecane_4","Hexabromodiphenyl_ether_1","Hexabromodiphenyl_ether_2","Hexabromodiphenyl_ether_3","Hexachlorobenzene_(HCB)_1","Hexachlorobenzene_(HCB)_2","Hexachlorobenzene_(HCB)_3","Lindane_1","Lindane_2","Lindane_3","Lindane_4","Pentabromodiphenyl_ether_1","Pentabromodiphenyl_ether_2","Pentabromodiphenyl_ether_3","Pentabromodiphenyl_ether_4","Pentachlorbenzene_1","Pentachlorbenzene_2","Pentachlorbenzene_3","Pentachlorbenzene_4","Perfluorooctane_Sulfonate_(PFOS)_1","Perfluorooctane_Sulfonate_(PFOS)_2","Perfluorooctane_Sulfonate_(PFOS)_3","Perfluorooctane_Sulfonate_(PFOS)_4","Perfluorooctane_Sulfonate_(PFOS)_5","Perfluorooctanoic_Acid_(PFOA)_1","Perfluorooctanoic_Acid_(PFOA)_2","Perfluorooctanoic_Acid (PFOA)_3","Perfluorooctanoic_Acid (PFOA)_4","Perfluorooctanoic_Acid (PFOA)_5","	
Polychlorinated_dibenzo-p-dioxins_(PCDD)_1","	
Polychlorinated_dibenzo-p-dioxins_(PCDD)_2","	
Polychlorinated_dibenzo-p-dioxins_(PCDD)_3","	
Polychlorinated_dibenzo-p-dioxins_(PCDD)_4","	
Polychlorinated_dibenzo-p-dioxins_(PCDD)_5","	
Polychlorinated_dibenzo-p-dioxins_(PCDD)_6","Polychlorinated_dibenzofurans_(PCDF)_1","Polychlorinated_dibenzofurans_(PCDF)_2","Polychlorinated_dibenzofurans_(PCDF)_3","Polychlorinated_dibenzofurans_(PCDF)_4","Polychlorinated_dibenzofurans_(PCDF)_5","Polychlorinated_dibenzofurans_(PCDF)_6","Polychlorinated_naphthalenes_1","Polychlorinated_naphthalenes_2","Polychlorinated_naphthalenes_3","Short-Chain_Chlorinated_paraffins_(SCCPs)_1","Short-Chain_Chlorinated_paraffins_(SCCPs)_2","Tetrabromodiphenyl_ether_1","Tetrabromodiphenyl_ether_2","Tetrabromodiphenyl_ether_3","Tetrabromodiphenyl_ether_4","Tetrabromodiphenyl_ether_5")
```

```{r}
#clusters_compounds <- data.frame()
# Creating a new DataFrame with 52 rows
clusters_compounds <- data.frame(clusters = rep(NA, 72))
clusters_compounds$clusters <- vector_1
clusters_compounds$Compound_Name <- vector_2
```

### Using clusters, unnest the individual protein sequences and join again

```{r}
aligned_compounds_clusters <- aligned_compounds |>
  mutate(row = row_number()) |>
  unnest(c(ProteinSequences, clusters))
```

```{r}
# Split the dataset based on compound name
aligned_compounds_clusters <- aligned_compounds_clusters |>
  group_by(clusters) |> 
  summarise(
    ProteinSequences = list(ProteinSequences)
  )

aligned_compounds_clusters$clusters <- unlist(aligned_compounds_clusters$clusters)
```


```{r}
aligned_compounds_clusters <- left_join(aligned_compounds_clusters, clusters_compounds, by = "clusters")
```

## Recalculate MSA for clusters

```{r}
# Perform MSA on each list of sequences
#aligned_compounds_clusters <- aligned_compounds_clusters |> 
  #mutate(MSA = map(ProteinSequences, ~msa(.x, type = "protein")))
```



## Core sequences

In order to make sequence logos on the core sequences, we need to calculate the best 9mer.

```{r}
conMat <- consensusMatrix(aligned_compounds$MSA[17][[1]])

mer_position_function <- function(consensus_mat) {
  consensus_mat <- consensus_mat |>
      as.data.frame() |>
      mutate(position = row_number()) |>
      pivot_longer(-position, names_to = "position_aa", values_to = "aa") |>
      group_by(position) |>
      mutate(position_score = max(aa)) |>
      select(position, position_score) |>
      distinct(position, .keep_all = TRUE)
  
  consensus_mat <- data.frame(
    position = consensus_mat$position,
    position_score = consensus_mat$position_score
  )
  
  mer_position <- consensus_mat |>
    mutate(mer_score = lead(position_score, n=1, default = 0) + lead(position_score, n=1, default = 0) + lead(position_score, n=2, default = 0) + lead(position_score, n=3, default = 0) + lead(position_score, n=4, default = 0) + lead(position_score, n=5, default = 0) + lead(position_score, n=6, default = 0) + lead(position_score, n=7, default = 0) + lead(position_score, n=8, default = 0)) |>
    filter(mer_score == max(mer_score)) |>
    slice_head(n = 1) |>
    select(position) |>
    pull()
  
  return(mer_position)
}

aligned_compounds <- aligned_compounds |>
  mutate(conMat = map(MSA, ~consensusMatrix(.x))) |>
  mutate(mer_position = map(conMat, ~mer_position_function(.x)))
```

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(extracted_chars = map(aligned_sequences, ~map(.x, ~str_sub(.x, 6, 6 + 8))))
```

```{r}
aligned_compounds <- aligned_compounds |>
  mutate(extracted_chars = map2(aligned_sequences, mer_position, ~map2(.x, rep(.y, length(.x)), ~str_sub(., .y, .y + 8)))) |>
  mutate(extracted_chars = map(extracted_chars, ~unlist(.x)))

aligned_compounds <- aligned_compounds |>
  mutate(seqlogo = map(extracted_chars, ~ggseqlogo(.x, seq_type = "aa")))
```

```{r}
aligned_compounds$seqlogo[18]
```
