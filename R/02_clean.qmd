---
title: "02_clean"
format: html
editor: visual
---


## Select key variables (columns)
We can dispense with many variables in this data set containing information that we will not be working with like the links and the scientific article information for each observation.
```{r}
# Define the columns you want to keep
columns_to_keep <- c("Compound Name", "Enzyme Name", "Encoding Gene", "KEGG Orthology", "Organism", "GenBankID", "Strain ID/Microorganism", "UniProt ID", "Protein ID", "Continent where study sampling was done (Collections)", "Country", "Isolation source", "Habitat notes")  

# Subset the 'all_sheets' data frame to keep only the specified columns
selected_columns <- all_sheets |> select(all_of(columns_to_keep))


```

## Visualize how many NaN values we have
For the moment, it is very difficult to assess whether to drop whole variables because of the presence of a NaN value without loosing to much information, therefore, first, we can look at which variables are the ones containing the most NaN values and assess whether it is acceptable to lose them.
```{r}

# Count missing values (NaN and 'n/a') in each column
total_samples <- nrow(selected_columns)
nan_counts <- colSums(is.na(selected_columns) | selected_columns == 'n/a' | selected_columns == 'na' | selected_columns == 'N/A' | selected_columns == 'NA')
nan_percentages <- (nan_counts / total_samples) * 100

# Create a data frame to store the percentages
missing_data <- data.frame(Column = names(nan_percentages), MissingPercentage = nan_percentages)

# Create a histogram
ggplot(missing_data, aes(x = Column, y = MissingPercentage)) +
  geom_bar(stat = "identity", fill = "blue") +
  labs(title = "Percentage of Missing Values in Each Column", x = "Column", y = "Percentage") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
We can see how the variables with data related to location and the "Protein ID" and the "UniProt ID" variable are the ones with the most number of NaN values. For now, we can leave it like this. Eventually, we can create a unique identifier for each unique observation and then reassess the NaN situation.

## Fixing naming conventions
### Encoding Gene:
For the naming convention, we are going to reduce names to the standard 4 letter code, when possible, where the first 3 letters are in lower-case and last letter in upper-case.

It is not that straightforward, though. We have some complexities:
- There are already correct 4-letter code gene names.
- There are 4-letter code names with the first letter in upper-case.
- There are 4-letter code names with variants (extra characters in the gene name)
- There are gene names that do not follow the 4-letter code system.

How we'll deal with this:
- We'll first extract a tibble with the unique gene names in the data set.
- We'll work on this tibble.
- Then, we'll substitute the names in the data set with the corresponding unique names in the tibble.

```{r}
# First, we extract all unique gene names into a single tibble:
unique_values_EcondingGene <- selected_columns |> 
  select("Encoding Gene") |> 
  distinct() 
unique_values_EcondingGene
```
There are 316 unique gene names at the beggining.

```{r}
# We'll separate the previous tibble into 2 where one will contain all gene names that should follow the 4-letter code, and another tibble with all the gene names that do not follow that system.



# Some variables we need:
desired_length <- c(3,4,5,6)
less6Char_No4L <- tibble(`Encoding Gene` = c('PA2086', 'PcCYP', 'RDases'))
less6Char_No4L_list <- c('PA2086', 'PcCYP', 'RDases')
more6Char_4L <- tibble(`Encoding Gene` = c('bphA1_1', 'bphA1_2', 'bphA2_1', 'bphA2_2', 'cprA-like', 'bphX0 (BphK)', 'bphX1 (BphK)', 'bphX2 (BphK)', 'bphX3 (BphK)'))
more6Char_4L_list <- c('bphA1_1', 'bphA1_2', 'bphA2_1', 'bphA2_2', 'cprA-like', 'bphX0 (BphK)', 'bphX1 (BphK)', 'bphX2 (BphK)', 'bphX3 (BphK)')



# Tibble with the 4-Letter code gene names:
unique_values_EcondingGene_4L <- unique_values_EcondingGene |> 
  filter(nchar(`Encoding Gene`) %in% desired_length) |> 
  filter(!(`Encoding Gene` %in% less6Char_No4L_list)) |> 
  bind_rows(more6Char_4L)

# Here we make the gene names be actually 4-letter coded and with the correct format (Yes, we are dropping variants of genes as if they were the same but I think it is fine to make this assumpion for the project)
unique_values_EcondingGene_4L <- unique_values_EcondingGene_4L |> 
  mutate(`Encoding Gene` = str_c(tolower(str_sub(`Encoding Gene`, 1, 1)),
                                 str_sub(`Encoding Gene`, 2, 3),
                                 toupper(str_sub(`Encoding Gene`, 4, 4)))) |> distinct()



# Tibble with the NO 4-Letter code gene names:
unique_values_EcondingGene_No4L <- unique_values_EcondingGene |> 
  filter(!(nchar(`Encoding Gene`) %in% desired_length)) |> 
  filter(!(`Encoding Gene` %in% more6Char_4L_list)) |> 
  bind_rows(less6Char_No4L)



# Now we join both tibbles in one:
unique_values_EcondingGene_clean <- bind_rows(unique_values_EcondingGene_4L,
                                              unique_values_EcondingGene_No4L)
unique_values_EcondingGene_clean
```
Now we have only 174 unique gene names. 

```{r}
# Finally, we substitute the gene name in the data set, with the corresponding gene name from our tibble so they all get standardized:


```


### Continent:
### Country:



## Save cleaned data

```{r}
# Define the path for the output .tsv file
output_file_path <- "../data/genes_clean.tsv"

# Save the subset data frame to a .tsv file
write.table(selected_columns, file = output_file_path, sep = "\t", quote = FALSE, row.names = FALSE)

# Verify that the file has been saved
if (file.exists(output_file_path)) {
  cat("Data with selected columns has been saved to", output_file_path, "\n")
} else {
  cat("Failed to save the data with selected columns to", output_file_path, "\n")
}

```
