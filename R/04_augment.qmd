---
title: "Data augmentation"
format:
  html:
    embed-resources: true
editor: visual
---

# Protein sequences

Protein sequences extracted from the raw fasta file "protein_seqs.fasta" are added to the corresponding sample using the Protein ID matches column. These sequences are stored in the "Sequence" column.

## Load clean dataset from step 2

```{r}
tsv_file <- "../data/data_clean.tsv"
data_clean <- read_tsv(tsv_file)
```

## ID/Sequences dataframe

Convert a fasta file that contains all the headers and sequences to a dataframe (each row corresponds to a sample, the first column shows the Protein ID extracted from the header and the second columns contains the sequence)

```{r}
fasta_file <- "../data/_raw/protein_seqs.fasta"
fasta_vector <- read_lines(fasta_file)             # Load fasta file as a character vector

seq_df <- tibble(line = fasta_vector) |>           # Create a tibble dataframe where each row corresponds to a line in the fasta file
  mutate(
    Protein_ID = str_extract(line, "^>\\S+"),      # Store the >ID from the header. It stores an NA value if the line corresponds to a sequence
    Sequence = str_extract(line, "^\\w+"),         # Store the sequence. It stores an NA value if the line corresponds to the header
    Protein_ID = str_replace(Protein_ID, ">", "")  # Delete the ">" symbol from the protein ID
  ) |>
  fill(Protein_ID) |>                              # Replace NA values in the Protein_ID column using the protein ID from the previous row.
  filter(!is.na(Sequence)) |>                      # Delete duplicate samples that contain NA values in the Sequence column
  select(Protein_ID, Sequence) |>                  # Delete the original fasta lines
  rename("Protein ID" = Protein_ID)                # Put the same name column as in the clean data
```

## Join dataframes

Join both data frames using the Protein ID matches to incorporate the sequence column to the data_clean data frame, creating a new data frame called data_augmented.

```{r}
data_augmented <- left_join(data_clean, seq_df, by = "Protein ID")
```

## Add KEGG pathways

```{r}

# Initialize variables to store the last KEGG ID and its corresponding pathway
last_kegg_id <- ""
last_pathway_info <- NA

# Define the function to fetch KEGG pathway names based on the position relative to "09100 Metabolism"
get_kegg_pathway_name <- function(kegg_id) {
  # Handle NA KEGG IDs
  if (is.na(kegg_id)) {
    return(NA)
  }

  if (kegg_id == last_kegg_id) {
    return(last_pathway_info)
  }

  tryCatch({
    brite_info <- keggGet(kegg_id)

    if ("BRITE" %in% names(brite_info[[1]])) {
      brite_section <- brite_info[[1]]$BRITE
      metabolism_index <- which(grepl("09100 Metabolism", brite_section))
      
      if (length(metabolism_index) > 0 && metabolism_index < length(brite_section)) {
        # Extract the pathway information and remove numerical prefix
        pathway_info <- brite_section[metabolism_index + 1]
        pathway_info <- sub("^[0-9]+[[:space:]]+", "", pathway_info)
        
        # Store in global variables for reuse
        last_kegg_id <<- kegg_id
        last_pathway_info <<- pathway_info
        
        return(pathway_info)
      }
    }

    # Store NA for this KEGG ID and return NA
    last_kegg_id <<- kegg_id
    last_pathway_info <<- NA
    return(NA)
  }, error = function(e) {
    # In case of an error, store NA for this KEGG ID and return NA
    last_kegg_id <<- kegg_id
    last_pathway_info <<- NA
    return(NA)
  })
}

# Apply the function to the entire dataset
data_augmented <- data_augmented |> 
  mutate(Pathway_Info = map_chr(`KEGG Orthology`, get_kegg_pathway_name))

```


## Save cleaned data

```{r}
#
# Define the path for the output .tsv file
output_file_path <- "../data/data_aumented.tsv"

# Save the subset data frame to a .tsv file
write.table(data_augmented, file = output_file_path, sep = "\t", quote = FALSE, row.names = FALSE)

# Verify that the file has been saved
if (file.exists(output_file_path)) {
  cat("Data with selected columns has been saved to", output_file_path, "\n")
} else {
  cat("Failed to save the data with selected columns to", output_file_path, "\n")
}
```
