---
title: "03_describe.qmd"
format: html
editor: visual
---

## Import Clean Data

```{r}
# Read TSV file into a data frame
data_clean <- read_delim("../data/clean_data.tsv", delim = "\t")

```

## Organism distribution

```{r}
# Calculate percentages of organisms
organism_percentages <- data_clean |> 
  count(Organism) |> 
  mutate(Percentage = n / sum(n) * 100)

# Plot pie chart with organisms percentages 
plot1 <- ggplot(organism_percentages, aes(x = "", y = Percentage, fill = Organism)) +
  geom_bar(stat = "identity", width = 1) +
  geom_text(aes(label = sprintf("%.1f%%", Percentage)),
            position = position_stack(vjust = 0.5),
            vjust=c(0.0, -0.5, 0.75),
            hjust=c(0.0, 0.0, 0.1),
            size = 3, color = "black") +
  coord_polar(theta = "y") +  # Convert to polar coordinates
  labs(title = "Percentage Distribution of Organisms") +
  theme_minimal() +
  theme(axis.text = element_blank(),
        axis.title = element_blank(),
        panel.grid = element_blank()) 


# Save the plot as a PNG file
ggsave("../results/organisms_distribution_plot.png", plot1, width = 10, height = 6, dpi = 300)

```

## Compounds vs Organisms distribution

### Bacteria

```{r}
# Create a subset of the data for the current organism
temp_bacteria_data <- data_clean  |>  filter(Organism == 'Bacteria') 

# Plot bar chart of compounds against the current organism
plot_bacteria_compound <- ggplot(temp_bacteria_data, aes(x = `Compound Name`, fill = `Compound Name`)) +
  geom_bar(position = "dodge") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, position = position_dodge(0.9), size = 2) +  # Add count labels
  labs(title = paste("Compounds Distribution -", "Becteria"), x = "Compound Name", y = "Count") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 60, hjust = 1, size=6),
    axis.text.y = element_text(size=6),
    plot.title = element_text(size = 10),
    axis.title.x = element_text(size = 8),  # Adjust the size of the x-axis label
    axis.title.y = element_text(size = 8),  # Adjust the size of the y-axis label
    legend.position = "bottom",
    legend.box = "vertical",  # Arrange legend items vertically
    legend.key.height = unit(0.5, "line"),  # Adjust the height of each legend item
    legend.key.size = unit(0.05, "cm"),
    legend.text = element_text(size = 6),  # Adjust the size of the legend text
    legend.title = element_text(size = 7)  # Adjust the size of the legend title
  ) +
  guides(fill = guide_legend(ncol = 5))

# Save the current plot as a PNG file
ggsave(paste0("../results/", "bacteria_vs_compounds_distribution.png"), plot_bacteria_compound, width = 10, height = 6, dpi = 300)


```

### Eukaryota

```{r}
# Create a subset of the data for the current organism
temp_eukaryota_data <- data_clean  |>  filter(Organism == 'Eukaryota') #Eukaryota

# Plot bar chart of compounds against the current organism
plot_eukaryota_compound <- ggplot(temp_eukaryota_data, aes(x = `Compound Name`, fill = `Compound Name`)) +
  geom_bar(position = "dodge") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, position = position_dodge(0.9), size = 3) +  # Add count labels
  labs(title = paste("Compounds Distribution -", "Eukaryota"), x = "Compound Name", y = "Count") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",  # Arrange legend items vertically
    legend.key.height = unit(0.5, "line"),  # Adjust the height of each legend item
    legend.key.size = unit(0.05, "cm"),
    legend.text = element_text(size = 10),  # Adjust the size of the legend text
    legend.title = element_text(size = 12)  # Adjust the size of the legend title
  )

# Save the current plot as a PNG file
ggsave(paste0("../results/", "eukaryota_vs_compounds_distribution.png"), plot_eukaryota_compound, width = 10, height = 6, dpi = 300)

```

### Fungi

```{r}
# Create a subset of the data for the current organism
temp_fungi_data <- data_clean  |>  filter(Organism == 'Fungi') 

# Plot bar chart of compounds against the current organism
plot_fungi_compound <- ggplot(temp_fungi_data, aes(x = `Compound Name`, fill = `Compound Name`)) +
  geom_bar(position = "dodge") +
  geom_text(stat = "count", aes(label = ..count..), vjust = -0.5, position = position_dodge(0.9), size = 3) +  # Add count labels
  labs(title = paste("Compounds Distribution -", "Fungi"), x = "Compound Name", y = "Count") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",  # Arrange legend items vertically
    legend.key.height = unit(0.5, "line"),  # Adjust the height of each legend item
    legend.key.size = unit(0.05, "cm"),
    legend.text = element_text(size = 10),  # Adjust the size of the legend text
    legend.title = element_text(size = 12)  # Adjust the size of the legend title
  ) +
  guides(fill = guide_legend(ncol = 1))

# Save the current plot as a PNG file
ggsave(paste0("../results/", "fungi_vs_compounds_distribution.png"), plot_fungi_compound, width = 10, height = 6, dpi = 300)
```

## Genes across different compounds

```{r}
# Stacked bar plot of genes and compounds
plot4 <- ggplot(data_clean, aes(x = "Compound_Name", fill = Encoding_Gene)) +
  geom_bar(position = "stack") +
  labs(title = "Genes Count for Each Compound", x = "Compound Name", y = "Count") +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size=6),
    axis.text.y = element_text(size=6),
    plot.title = element_text(size = 10),
    axis.title.x = element_text(size = 8),  # Adjust the size of the x-axis label
    axis.title.y = element_text(size = 8),  # Adjust the size of the y-axis label
    legend.position = "bottom",
    legend.box = "vertical",  # Arrange legend items vertically
    legend.key.height = unit(0.5, "line"),  # Adjust the height of each legend item
    legend.key.size = unit(0.05, "cm"),
    legend.text = element_text(size = 6),  # Adjust the size of the legend text
    legend.title = element_text(size = 7)  # Adjust the size of the legend title
    ) +
  guides(fill = guide_legend(ncol = 12))  # Adjust the number of columns in the legend


# Save the plot as a PNG file
ggsave("../results/genes_vs_compounds_stacked_plot.png", plot4, width = 10, height = 6, dpi = 300)
```

```{r}
# Stacked bar chart of countries across different organisms
plot5 <- ggplot(data_clean, aes(x = Organism, fill = Country)) +
  geom_bar(position = "stack") +
  labs(title = "Country Distribution Across Organisms", x = "Organism", y = "Count") +
  theme_minimal() + 
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size=6),
    axis.text.y = element_text(size=6),
    plot.title = element_text(size = 10),
    axis.title.x = element_text(size = 8),  # Adjust the size of the x-axis label
    axis.title.y = element_text(size = 8),  # Adjust the size of the y-axis label
    legend.position = "bottom",
    legend.box = "vertical",  # Arrange legend items vertically
    legend.key.height = unit(0.5, "line"),  # Adjust the height of each legend item
    legend.key.size = unit(0.05, "cm"),
    legend.text = element_text(size = 6),  # Adjust the size of the legend text
    legend.title = element_text(size = 7)  # Adjust the size of the legend title
    ) +
  guides(fill = guide_legend(ncol = 12))  # Adjust the number of columns in the legend
print(plot5)

#Save the plot
ggsave("../results/countries_vs_organisms_stacked_plot.png", plot5, width = 10, height = 6, dpi = 300)
```

Creation of a new data set with only information containing bacteria since it is more than 99% of the organisms:

```{r}
only_bacteria_data <- as.data.frame(filter(data_clean, Organism == "Bacteria"))

only_bacteria_data$correct_continent <- rep(NA, length = nrow(only_bacteria_data))
only_bacteria_data$correct_continent[which(grepl("Spain|Czech Republic|France|Germany|Poland|United Kingdom|Switzerland|Belgium|Greece|Sweden|Netherlands|Ukraine|Italy|Portugal|Denmark|Hungary|Norway|Austria|Serbia|Finland|Mediterranean Sea", only_bacteria_data$Country))] <- "Europe"
only_bacteria_data$correct_continent[which(grepl("Tanzania|South Africa| Ethiopia|Morocco|Cameroon|Nigeria|Ghana|Uganda|Tunisia|Egypt", only_bacteria_data$Country))] <- "Africa"

only_bacteria_data$correct_continent[which(grepl("USA|Canada|Peru|Brazil|America|Venezuela|Panama|Mexico|Chile|French Guiana", only_bacteria_data$Country))] <- "America"

only_bacteria_data$correct_continent[which(grepl("Australia|Kiribati", only_bacteria_data$Country))] <- "Oceania"
only_bacteria_data$correct_continent[which(grepl("Japan|India|China|Russia|South Korea|Turkey|Iran|Israel|Taiwan|Saudi Arabia|Kuwait|Singapore|Vietnam|Pakistan|Indonesia|Zhongshan Station|Thailand|Myanmar", only_bacteria_data$Country))] <- "Asia"
only_bacteria_data$correct_continent[which(grepl("Antartica|South Shetland Islands", only_bacteria_data$Country))] <- "Antartica"

```

Creation of a plot that separates the amount of bacteria depending on country (stacked) and continent:

```{r}
# Stacked bar chart of countries across different organisms
plot6 <- ggplot(only_bacteria_data, aes(x = correct_continent, fill = Country)) +
  geom_bar(position = "stack") +
  labs(title = "Bacteria distribution across Continent and Country", x = "Continent", y = "Count") +
  theme_minimal() + 
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size=6),
    axis.text.y = element_text(size=6),
    plot.title = element_text(size = 10),
    axis.title.x = element_text(size = 8),  # Adjust the size of the x-axis label
    axis.title.y = element_text(size = 8),  # Adjust the size of the y-axis label
    legend.position = "bottom",
    legend.box = "vertical",  # Arrange legend items vertically
    legend.key.height = unit(0.5, "line"),  # Adjust the height of each legend item
    legend.key.size = unit(0.05, "cm"),
    legend.text = element_text(size = 6),  # Adjust the size of the legend text
    legend.title = element_text(size = 7)  # Adjust the size of the legend title
    ) +
  guides(fill = guide_legend(ncol = 12))  # Adjust the number of columns in the legend
print(plot6)

#Save the plot
ggsave("../results/countries_and_continents_vs_organisms_stacked_plot.png", plot6, width = 10, height = 6, dpi = 300)
```

```{r}
library(maps)
world_map_plot <- as.data.frame(select(only_bacteria_data, Country))
world_map_plot <- count(world_map_plot, Country)
names(world_map_plot)[names(world_map_plot) == "n"] <- "Count"
names(world_map_plot)[names(world_map_plot) == "Country"] <- "region"

Count <- as.numeric(as.character(world_map_plot$Count))

diff <- setdiff(world$region, world_map_plot$region)
worldSubset <- inner_join(world, world_map_plot, by = "region")

plain <- theme(
  axis.text = element_blank(),
  axis.line = element_blank(),
  axis.ticks = element_blank(),
  panel.border = element_blank(),
  panel.grid = element_blank(),
  axis.title = element_blank(),
  panel.background = element_rect(fill = "white"),
  plot.title = element_text(hjust = 0.5)
)
worldHDI <- ggplot(data = worldSubset, mapping = aes(x = long, y = lat, group = group)) + 
  geom_polygon(aes(fill = Count)) +  
  coord_fixed(1.3) +
  scale_fill_distiller(palette ="RdBu", direction = -1) + # or direction=1
  ggtitle("Bacteria count around the countries") +
  plain

worldHDI
```
